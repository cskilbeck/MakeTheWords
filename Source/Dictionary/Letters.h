//////////////////////////////////////////////////////////////////////

#pragma  once

//////////////////////////////////////////////////////////////////////

namespace Reference
{

	//////////////////////////////////////////////////////////////////////

	struct Letters
	{
		//////////////////////////////////////////////////////////////////////

		struct Letter
		{
			char		mCharacter;
			uint8		mScore;
			uint16		mDistribution;

			//////////////////////////////////////////////////////////////////////

			Letter(char c, uint8 s, uint16 d) : mCharacter(c), mScore(s), mDistribution(d)
			{
			}
		};

		//////////////////////////////////////////////////////////////////////

		std::vector<char>	mDistribution;
		std::vector<Letter>	mLetters;
		Random				mRandom;

		//////////////////////////////////////////////////////////////////////

		Letters()
		{
		}

		//////////////////////////////////////////////////////////////////////

		void Seed(uint32 seed)
		{
			mRandom.Seed(seed);
		}

		//////////////////////////////////////////////////////////////////////

		void Release()
		{
			mDistribution.clear();
			mLetters.clear();
		}

		//////////////////////////////////////////////////////////////////////

		void Add(char character, uint8 score, uint16 distribution)
		{
			mLetters.push_back(Letter(character, score, distribution));
			for(int i=0; i<distribution; ++i)
			{
				mDistribution.push_back(character);
			}
		}

		//////////////////////////////////////////////////////////////////////

		int Score(char c) const
		{
			return mLetters[tolower(c) - 'a'].mScore;
		}

		//////////////////////////////////////////////////////////////////////

		char GetRandomLetter()
		{
			return mDistribution[mRandom.Next() % mDistribution.size()];
		}
	};

} // ::Dictionary